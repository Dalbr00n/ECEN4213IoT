{
  "_from": "camera-capture",
  "_id": "camera-capture@0.0.11",
  "_inBundle": false,
  "_integrity": "sha512-Mri02qkRDwm4TgpbbOVXSLXSeCp85tJoZZdC5v+/nXdEKXFEkCbZ3Vmd31YO9hSVI8es4nddYPmnAgc6BAf3Vg==",
  "_location": "/camera-capture",
  "_phantomChildren": {},
  "_requested": {
    "type": "tag",
    "registry": true,
    "raw": "camera-capture",
    "name": "camera-capture",
    "escapedName": "camera-capture",
    "rawSpec": "",
    "saveSpec": null,
    "fetchSpec": "latest"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/camera-capture/-/camera-capture-0.0.11.tgz",
  "_shasum": "3505ca7f324472a1f608e992711f7dad169c67cc",
  "_spec": "camera-capture",
  "_where": "/home/pi/Desktop/IoTProject",
  "author": {
    "name": "Sebastian Gurin",
    "email": "sebastigurin@gmail.com",
    "url": "http://sgurin.com"
  },
  "bugs": {
    "url": "https://github.com/cancerberoSgx/camera-capture"
  },
  "bundleDependencies": false,
  "dependencies": {
    "misc-utils-of-mine-generic": "^0.2.34"
  },
  "deprecated": false,
  "description": "Super portable, fast camera capture library for node.js (server). TypeScript/JavaScript easy to use APIs. Uses puppeteer headless browser to capture webcam video (audio/desktop, recording, etc) and stream back to node.js frame by frame in plain image data for optimal speed or optionally in encoded formats like jpeg, png, bmp, etc",
  "devDependencies": {
    "@types/file-type": "^10.9.1",
    "@types/node": "^12.7.8",
    "@types/puppeteer": "^1.20.0",
    "ava": "^2.4.0",
    "file-type": "^12.3.0",
    "markdown-toc": "^1.2.0",
    "puppeteer": "^1.20.0",
    "ts-node": "^8.4.1",
    "ts-refactor": "0.0.9",
    "typedoc": "^0.15.0",
    "typedoc-plugin-markdown": "^2.2.6",
    "typescript": "^3.6.3"
  },
  "homepage": "https://www.npmjs.com/package/camera-capture",
  "keywords": [
    "Node.js",
    "camera",
    "webcam",
    "video",
    "capture",
    "record",
    "camera",
    "audio",
    "video record",
    "camera capture",
    "audio capture",
    "screenshot",
    "desktop"
  ],
  "license": "MIT",
  "main": "dist/src/index.js",
  "name": "camera-capture",
  "peerDependencies": {
    "puppeteer": "^1.20.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cancerberoSgx/camera-capture.git"
  },
  "scripts": {
    "all": "npm run clean && npm run lint && npm run build && npm run test && npm run test-js && npm run docs",
    "all-publish": "npm run all && git commit -a -m 'version patch' && npm version patch && npm publish",
    "build": "npm run clean && npx tsc && npm run copy ",
    "clean": "rm -rf tmp* dist test-browser-outdir working_tmp ../docs",
    "copy": "mkdir -p dist/src/assets && cp src/assets/* dist/src/assets/ && cp src/index.html dist/src/index.html ",
    "docs": "npm run docs-readme-toc && npm run docs-api",
    "docs-api": "rm -rf ../docs && typedoc  --ignoreCompilerErrors --theme markdown --out ../docs --readme none --excludeNotExported src/index.ts ",
    "docs-readme-toc": "npx markdown-toc README.md -i",
    "format": "npx ts-refactor format \"src/**/*.ts*\" \"test/**/*.ts*\" ./formatCodeSettings.json --tsConfigPath ./tsconfig.json --dontAsk",
    "lint": "npm run organizeImports && npm run format",
    "organizeImports": "npx ts-refactor organizeImports \"src/**/*.ts*\" \"test/**/*.ts*\" ./formatCodeSettings.json --tsConfigPath ./tsconfig.json --dontAsk ",
    "prepare": "npm run build",
    "test": "npm run build && npx ava --serial --concurrency 1 --config ava.config.js",
    "test-js": "npm run build && npx ava --serial --concurrency 1 --config ava.config-js.js"
  },
  "types": "dist/src/index.d.ts",
  "version": "0.0.11"
}
